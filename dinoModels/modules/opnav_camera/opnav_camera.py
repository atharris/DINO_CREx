# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_opnav_camera')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_opnav_camera')
    _opnav_camera = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_opnav_camera', [dirname(__file__)])
        except ImportError:
            import _opnav_camera
            return _opnav_camera
        if fp is not None:
            try:
                _mod = imp.load_module('_opnav_camera', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _opnav_camera = swig_import_helper()
    del swig_import_helper
else:
    import _opnav_camera
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _opnav_camera.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _opnav_camera.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _opnav_camera.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _opnav_camera.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _opnav_camera.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _opnav_camera.SwigPyIterator_equal(self, x)

    def copy(self):
        return _opnav_camera.SwigPyIterator_copy(self)

    def next(self):
        return _opnav_camera.SwigPyIterator_next(self)

    def __next__(self):
        return _opnav_camera.SwigPyIterator___next__(self)

    def previous(self):
        return _opnav_camera.SwigPyIterator_previous(self)

    def advance(self, n):
        return _opnav_camera.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _opnav_camera.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _opnav_camera.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _opnav_camera.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _opnav_camera.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _opnav_camera.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _opnav_camera.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _opnav_camera.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_doubleArray(nelements):
    return _opnav_camera.new_doubleArray(nelements)
new_doubleArray = _opnav_camera.new_doubleArray

def delete_doubleArray(ary):
    return _opnav_camera.delete_doubleArray(ary)
delete_doubleArray = _opnav_camera.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _opnav_camera.doubleArray_getitem(ary, index)
doubleArray_getitem = _opnav_camera.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _opnav_camera.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _opnav_camera.doubleArray_setitem

def new_longArray(nelements):
    return _opnav_camera.new_longArray(nelements)
new_longArray = _opnav_camera.new_longArray

def delete_longArray(ary):
    return _opnav_camera.delete_longArray(ary)
delete_longArray = _opnav_camera.delete_longArray

def longArray_getitem(ary, index):
    return _opnav_camera.longArray_getitem(ary, index)
longArray_getitem = _opnav_camera.longArray_getitem

def longArray_setitem(ary, index, value):
    return _opnav_camera.longArray_setitem(ary, index, value)
longArray_setitem = _opnav_camera.longArray_setitem

def new_intArray(nelements):
    return _opnav_camera.new_intArray(nelements)
new_intArray = _opnav_camera.new_intArray

def delete_intArray(ary):
    return _opnav_camera.delete_intArray(ary)
delete_intArray = _opnav_camera.delete_intArray

def intArray_getitem(ary, index):
    return _opnav_camera.intArray_getitem(ary, index)
intArray_getitem = _opnav_camera.intArray_getitem

def intArray_setitem(ary, index, value):
    return _opnav_camera.intArray_setitem(ary, index, value)
intArray_setitem = _opnav_camera.intArray_setitem

def new_shortArray(nelements):
    return _opnav_camera.new_shortArray(nelements)
new_shortArray = _opnav_camera.new_shortArray

def delete_shortArray(ary):
    return _opnav_camera.delete_shortArray(ary)
delete_shortArray = _opnav_camera.delete_shortArray

def shortArray_getitem(ary, index):
    return _opnav_camera.shortArray_getitem(ary, index)
shortArray_getitem = _opnav_camera.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _opnav_camera.shortArray_setitem(ary, index, value)
shortArray_setitem = _opnav_camera.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



def new_boolArray(nelements):
    return _opnav_camera.new_boolArray(nelements)
new_boolArray = _opnav_camera.new_boolArray

def delete_boolArray(ary):
    return _opnav_camera.delete_boolArray(ary)
delete_boolArray = _opnav_camera.delete_boolArray

def boolArray_getitem(ary, index):
    return _opnav_camera.boolArray_getitem(ary, index)
boolArray_getitem = _opnav_camera.boolArray_getitem

def boolArray_setitem(ary, index, value):
    return _opnav_camera.boolArray_setitem(ary, index, value)
boolArray_setitem = _opnav_camera.boolArray_setitem
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _opnav_camera.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _opnav_camera.IntVector___nonzero__(self)

    def __bool__(self):
        return _opnav_camera.IntVector___bool__(self)

    def __len__(self):
        return _opnav_camera.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _opnav_camera.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _opnav_camera.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _opnav_camera.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _opnav_camera.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _opnav_camera.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _opnav_camera.IntVector___setitem__(self, *args)

    def pop(self):
        return _opnav_camera.IntVector_pop(self)

    def append(self, x):
        return _opnav_camera.IntVector_append(self, x)

    def empty(self):
        return _opnav_camera.IntVector_empty(self)

    def size(self):
        return _opnav_camera.IntVector_size(self)

    def swap(self, v):
        return _opnav_camera.IntVector_swap(self, v)

    def begin(self):
        return _opnav_camera.IntVector_begin(self)

    def end(self):
        return _opnav_camera.IntVector_end(self)

    def rbegin(self):
        return _opnav_camera.IntVector_rbegin(self)

    def rend(self):
        return _opnav_camera.IntVector_rend(self)

    def clear(self):
        return _opnav_camera.IntVector_clear(self)

    def get_allocator(self):
        return _opnav_camera.IntVector_get_allocator(self)

    def pop_back(self):
        return _opnav_camera.IntVector_pop_back(self)

    def erase(self, *args):
        return _opnav_camera.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _opnav_camera.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _opnav_camera.IntVector_push_back(self, x)

    def front(self):
        return _opnav_camera.IntVector_front(self)

    def back(self):
        return _opnav_camera.IntVector_back(self)

    def assign(self, n, x):
        return _opnav_camera.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _opnav_camera.IntVector_resize(self, *args)

    def insert(self, *args):
        return _opnav_camera.IntVector_insert(self, *args)

    def reserve(self, n):
        return _opnav_camera.IntVector_reserve(self, n)

    def capacity(self):
        return _opnav_camera.IntVector_capacity(self)
    __swig_destroy__ = _opnav_camera.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _opnav_camera.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _opnav_camera.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _opnav_camera.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _opnav_camera.DoubleVector___bool__(self)

    def __len__(self):
        return _opnav_camera.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _opnav_camera.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _opnav_camera.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _opnav_camera.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _opnav_camera.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _opnav_camera.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _opnav_camera.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _opnav_camera.DoubleVector_pop(self)

    def append(self, x):
        return _opnav_camera.DoubleVector_append(self, x)

    def empty(self):
        return _opnav_camera.DoubleVector_empty(self)

    def size(self):
        return _opnav_camera.DoubleVector_size(self)

    def swap(self, v):
        return _opnav_camera.DoubleVector_swap(self, v)

    def begin(self):
        return _opnav_camera.DoubleVector_begin(self)

    def end(self):
        return _opnav_camera.DoubleVector_end(self)

    def rbegin(self):
        return _opnav_camera.DoubleVector_rbegin(self)

    def rend(self):
        return _opnav_camera.DoubleVector_rend(self)

    def clear(self):
        return _opnav_camera.DoubleVector_clear(self)

    def get_allocator(self):
        return _opnav_camera.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _opnav_camera.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _opnav_camera.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _opnav_camera.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _opnav_camera.DoubleVector_push_back(self, x)

    def front(self):
        return _opnav_camera.DoubleVector_front(self)

    def back(self):
        return _opnav_camera.DoubleVector_back(self)

    def assign(self, n, x):
        return _opnav_camera.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _opnav_camera.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _opnav_camera.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _opnav_camera.DoubleVector_reserve(self, n)

    def capacity(self):
        return _opnav_camera.DoubleVector_capacity(self)
    __swig_destroy__ = _opnav_camera.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _opnav_camera.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _opnav_camera.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _opnav_camera.StringVector___nonzero__(self)

    def __bool__(self):
        return _opnav_camera.StringVector___bool__(self)

    def __len__(self):
        return _opnav_camera.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _opnav_camera.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _opnav_camera.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _opnav_camera.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _opnav_camera.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _opnav_camera.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _opnav_camera.StringVector___setitem__(self, *args)

    def pop(self):
        return _opnav_camera.StringVector_pop(self)

    def append(self, x):
        return _opnav_camera.StringVector_append(self, x)

    def empty(self):
        return _opnav_camera.StringVector_empty(self)

    def size(self):
        return _opnav_camera.StringVector_size(self)

    def swap(self, v):
        return _opnav_camera.StringVector_swap(self, v)

    def begin(self):
        return _opnav_camera.StringVector_begin(self)

    def end(self):
        return _opnav_camera.StringVector_end(self)

    def rbegin(self):
        return _opnav_camera.StringVector_rbegin(self)

    def rend(self):
        return _opnav_camera.StringVector_rend(self)

    def clear(self):
        return _opnav_camera.StringVector_clear(self)

    def get_allocator(self):
        return _opnav_camera.StringVector_get_allocator(self)

    def pop_back(self):
        return _opnav_camera.StringVector_pop_back(self)

    def erase(self, *args):
        return _opnav_camera.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _opnav_camera.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _opnav_camera.StringVector_push_back(self, x)

    def front(self):
        return _opnav_camera.StringVector_front(self)

    def back(self):
        return _opnav_camera.StringVector_back(self)

    def assign(self, n, x):
        return _opnav_camera.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _opnav_camera.StringVector_resize(self, *args)

    def insert(self, *args):
        return _opnav_camera.StringVector_insert(self, *args)

    def reserve(self, n):
        return _opnav_camera.StringVector_reserve(self, n)

    def capacity(self):
        return _opnav_camera.StringVector_capacity(self)
    __swig_destroy__ = _opnav_camera.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _opnav_camera.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _opnav_camera.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _opnav_camera.StringSet___nonzero__(self)

    def __bool__(self):
        return _opnav_camera.StringSet___bool__(self)

    def __len__(self):
        return _opnav_camera.StringSet___len__(self)

    def append(self, x):
        return _opnav_camera.StringSet_append(self, x)

    def __contains__(self, x):
        return _opnav_camera.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _opnav_camera.StringSet___getitem__(self, i)

    def add(self, x):
        return _opnav_camera.StringSet_add(self, x)

    def discard(self, x):
        return _opnav_camera.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _opnav_camera.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _opnav_camera.StringSet_empty(self)

    def size(self):
        return _opnav_camera.StringSet_size(self)

    def clear(self):
        return _opnav_camera.StringSet_clear(self)

    def swap(self, v):
        return _opnav_camera.StringSet_swap(self, v)

    def count(self, x):
        return _opnav_camera.StringSet_count(self, x)

    def begin(self):
        return _opnav_camera.StringSet_begin(self)

    def end(self):
        return _opnav_camera.StringSet_end(self)

    def rbegin(self):
        return _opnav_camera.StringSet_rbegin(self)

    def rend(self):
        return _opnav_camera.StringSet_rend(self)

    def erase(self, *args):
        return _opnav_camera.StringSet_erase(self, *args)

    def find(self, x):
        return _opnav_camera.StringSet_find(self, x)

    def lower_bound(self, x):
        return _opnav_camera.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _opnav_camera.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _opnav_camera.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _opnav_camera.StringSet_insert(self, __x)
    __swig_destroy__ = _opnav_camera.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _opnav_camera.StringSet_swigregister
StringSet_swigregister(StringSet)

class intSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _opnav_camera.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _opnav_camera.intSet___nonzero__(self)

    def __bool__(self):
        return _opnav_camera.intSet___bool__(self)

    def __len__(self):
        return _opnav_camera.intSet___len__(self)

    def append(self, x):
        return _opnav_camera.intSet_append(self, x)

    def __contains__(self, x):
        return _opnav_camera.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _opnav_camera.intSet___getitem__(self, i)

    def add(self, x):
        return _opnav_camera.intSet_add(self, x)

    def discard(self, x):
        return _opnav_camera.intSet_discard(self, x)

    def __init__(self, *args):
        this = _opnav_camera.new_intSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _opnav_camera.intSet_empty(self)

    def size(self):
        return _opnav_camera.intSet_size(self)

    def clear(self):
        return _opnav_camera.intSet_clear(self)

    def swap(self, v):
        return _opnav_camera.intSet_swap(self, v)

    def count(self, x):
        return _opnav_camera.intSet_count(self, x)

    def begin(self):
        return _opnav_camera.intSet_begin(self)

    def end(self):
        return _opnav_camera.intSet_end(self)

    def rbegin(self):
        return _opnav_camera.intSet_rbegin(self)

    def rend(self):
        return _opnav_camera.intSet_rend(self)

    def erase(self, *args):
        return _opnav_camera.intSet_erase(self, *args)

    def find(self, x):
        return _opnav_camera.intSet_find(self, x)

    def lower_bound(self, x):
        return _opnav_camera.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _opnav_camera.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _opnav_camera.intSet_equal_range(self, x)

    def insert(self, __x):
        return _opnav_camera.intSet_insert(self, __x)
    __swig_destroy__ = _opnav_camera.delete_intSet
    __del__ = lambda self: None
intSet_swigregister = _opnav_camera.intSet_swigregister
intSet_swigregister(intSet)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _opnav_camera.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _opnav_camera.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _opnav_camera.ConstCharVector___bool__(self)

    def __len__(self):
        return _opnav_camera.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _opnav_camera.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _opnav_camera.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _opnav_camera.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _opnav_camera.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _opnav_camera.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _opnav_camera.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _opnav_camera.ConstCharVector_pop(self)

    def append(self, x):
        return _opnav_camera.ConstCharVector_append(self, x)

    def empty(self):
        return _opnav_camera.ConstCharVector_empty(self)

    def size(self):
        return _opnav_camera.ConstCharVector_size(self)

    def swap(self, v):
        return _opnav_camera.ConstCharVector_swap(self, v)

    def begin(self):
        return _opnav_camera.ConstCharVector_begin(self)

    def end(self):
        return _opnav_camera.ConstCharVector_end(self)

    def rbegin(self):
        return _opnav_camera.ConstCharVector_rbegin(self)

    def rend(self):
        return _opnav_camera.ConstCharVector_rend(self)

    def clear(self):
        return _opnav_camera.ConstCharVector_clear(self)

    def get_allocator(self):
        return _opnav_camera.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _opnav_camera.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _opnav_camera.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _opnav_camera.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _opnav_camera.ConstCharVector_push_back(self, x)

    def front(self):
        return _opnav_camera.ConstCharVector_front(self)

    def back(self):
        return _opnav_camera.ConstCharVector_back(self)

    def assign(self, n, x):
        return _opnav_camera.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _opnav_camera.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _opnav_camera.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _opnav_camera.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _opnav_camera.ConstCharVector_capacity(self)
    __swig_destroy__ = _opnav_camera.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _opnav_camera.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class MultiArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _opnav_camera.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _opnav_camera.MultiArray___nonzero__(self)

    def __bool__(self):
        return _opnav_camera.MultiArray___bool__(self)

    def __len__(self):
        return _opnav_camera.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _opnav_camera.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _opnav_camera.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _opnav_camera.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _opnav_camera.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _opnav_camera.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _opnav_camera.MultiArray___setitem__(self, *args)

    def pop(self):
        return _opnav_camera.MultiArray_pop(self)

    def append(self, x):
        return _opnav_camera.MultiArray_append(self, x)

    def empty(self):
        return _opnav_camera.MultiArray_empty(self)

    def size(self):
        return _opnav_camera.MultiArray_size(self)

    def swap(self, v):
        return _opnav_camera.MultiArray_swap(self, v)

    def begin(self):
        return _opnav_camera.MultiArray_begin(self)

    def end(self):
        return _opnav_camera.MultiArray_end(self)

    def rbegin(self):
        return _opnav_camera.MultiArray_rbegin(self)

    def rend(self):
        return _opnav_camera.MultiArray_rend(self)

    def clear(self):
        return _opnav_camera.MultiArray_clear(self)

    def get_allocator(self):
        return _opnav_camera.MultiArray_get_allocator(self)

    def pop_back(self):
        return _opnav_camera.MultiArray_pop_back(self)

    def erase(self, *args):
        return _opnav_camera.MultiArray_erase(self, *args)

    def __init__(self, *args):
        this = _opnav_camera.new_MultiArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _opnav_camera.MultiArray_push_back(self, x)

    def front(self):
        return _opnav_camera.MultiArray_front(self)

    def back(self):
        return _opnav_camera.MultiArray_back(self)

    def assign(self, n, x):
        return _opnav_camera.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _opnav_camera.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _opnav_camera.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _opnav_camera.MultiArray_reserve(self, n)

    def capacity(self):
        return _opnav_camera.MultiArray_capacity(self)
    __swig_destroy__ = _opnav_camera.delete_MultiArray
    __del__ = lambda self: None
MultiArray_swigregister = _opnav_camera.MultiArray_swigregister
MultiArray_swigregister(MultiArray)

class SysModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _opnav_camera.new_SysModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _opnav_camera.delete_SysModel
    __del__ = lambda self: None

    def SelfInit(self):
        return _opnav_camera.SysModel_SelfInit(self)

    def CrossInit(self):
        return _opnav_camera.SysModel_CrossInit(self)

    def IntegratedInit(self):
        return _opnav_camera.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _opnav_camera.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _opnav_camera.SysModel_Reset(self, CurrentSimNanos)
    __swig_setmethods__["ModelTag"] = _opnav_camera.SysModel_ModelTag_set
    __swig_getmethods__["ModelTag"] = _opnav_camera.SysModel_ModelTag_get
    if _newclass:
        ModelTag = _swig_property(_opnav_camera.SysModel_ModelTag_get, _opnav_camera.SysModel_ModelTag_set)
    __swig_setmethods__["CallCounts"] = _opnav_camera.SysModel_CallCounts_set
    __swig_getmethods__["CallCounts"] = _opnav_camera.SysModel_CallCounts_get
    if _newclass:
        CallCounts = _swig_property(_opnav_camera.SysModel_CallCounts_get, _opnav_camera.SysModel_CallCounts_set)
    __swig_setmethods__["RNGSeed"] = _opnav_camera.SysModel_RNGSeed_set
    __swig_getmethods__["RNGSeed"] = _opnav_camera.SysModel_RNGSeed_get
    if _newclass:
        RNGSeed = _swig_property(_opnav_camera.SysModel_RNGSeed_get, _opnav_camera.SysModel_RNGSeed_set)
    __swig_setmethods__["moduleID"] = _opnav_camera.SysModel_moduleID_set
    __swig_getmethods__["moduleID"] = _opnav_camera.SysModel_moduleID_get
    if _newclass:
        moduleID = _swig_property(_opnav_camera.SysModel_moduleID_get, _opnav_camera.SysModel_moduleID_set)
SysModel_swigregister = _opnav_camera.SysModel_swigregister
SysModel_swigregister(SysModel)

class OpnavMessageStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpnavMessageStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpnavMessageStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pixel_out"] = _opnav_camera.OpnavMessageStruct_pixel_out_set
    __swig_getmethods__["pixel_out"] = _opnav_camera.OpnavMessageStruct_pixel_out_get
    if _newclass:
        pixel_out = _swig_property(_opnav_camera.OpnavMessageStruct_pixel_out_get, _opnav_camera.OpnavMessageStruct_pixel_out_set)
    __swig_setmethods__["line_out"] = _opnav_camera.OpnavMessageStruct_line_out_set
    __swig_getmethods__["line_out"] = _opnav_camera.OpnavMessageStruct_line_out_get
    if _newclass:
        line_out = _swig_property(_opnav_camera.OpnavMessageStruct_line_out_get, _opnav_camera.OpnavMessageStruct_line_out_set)
    __swig_setmethods__["mag_out"] = _opnav_camera.OpnavMessageStruct_mag_out_set
    __swig_getmethods__["mag_out"] = _opnav_camera.OpnavMessageStruct_mag_out_get
    if _newclass:
        mag_out = _swig_property(_opnav_camera.OpnavMessageStruct_mag_out_get, _opnav_camera.OpnavMessageStruct_mag_out_set)

    def __init__(self, *args):
        this = _opnav_camera.new_OpnavMessageStruct(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _opnav_camera.delete_OpnavMessageStruct
    __del__ = lambda self: None
OpnavMessageStruct_swigregister = _opnav_camera.OpnavMessageStruct_swigregister
OpnavMessageStruct_swigregister(OpnavMessageStruct)

class OpnavCamera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpnavCamera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpnavCamera, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _opnav_camera.delete_OpnavCamera
    __del__ = lambda self: None

    def deg2rad(self, degrees):
        return _opnav_camera.OpnavCamera_deg2rad(self, degrees)

    def updateState(self):
        return _opnav_camera.OpnavCamera_updateState(self)

    def camera_frame2focal_plane(self, c2, c3):
        return _opnav_camera.OpnavCamera_camera_frame2focal_plane(self, c2, c3)
    __swig_setmethods__["RA_stars_only"] = _opnav_camera.OpnavCamera_RA_stars_only_set
    __swig_getmethods__["RA_stars_only"] = _opnav_camera.OpnavCamera_RA_stars_only_get
    if _newclass:
        RA_stars_only = _swig_property(_opnav_camera.OpnavCamera_RA_stars_only_get, _opnav_camera.OpnavCamera_RA_stars_only_set)
    __swig_setmethods__["DE_stars_only"] = _opnav_camera.OpnavCamera_DE_stars_only_set
    __swig_getmethods__["DE_stars_only"] = _opnav_camera.OpnavCamera_DE_stars_only_get
    if _newclass:
        DE_stars_only = _swig_property(_opnav_camera.OpnavCamera_DE_stars_only_get, _opnav_camera.OpnavCamera_DE_stars_only_set)
    __swig_setmethods__["n1_stars_only"] = _opnav_camera.OpnavCamera_n1_stars_only_set
    __swig_getmethods__["n1_stars_only"] = _opnav_camera.OpnavCamera_n1_stars_only_get
    if _newclass:
        n1_stars_only = _swig_property(_opnav_camera.OpnavCamera_n1_stars_only_get, _opnav_camera.OpnavCamera_n1_stars_only_set)
    __swig_setmethods__["n2_stars_only"] = _opnav_camera.OpnavCamera_n2_stars_only_set
    __swig_getmethods__["n2_stars_only"] = _opnav_camera.OpnavCamera_n2_stars_only_get
    if _newclass:
        n2_stars_only = _swig_property(_opnav_camera.OpnavCamera_n2_stars_only_get, _opnav_camera.OpnavCamera_n2_stars_only_set)
    __swig_setmethods__["n3_stars_only"] = _opnav_camera.OpnavCamera_n3_stars_only_set
    __swig_getmethods__["n3_stars_only"] = _opnav_camera.OpnavCamera_n3_stars_only_get
    if _newclass:
        n3_stars_only = _swig_property(_opnav_camera.OpnavCamera_n3_stars_only_get, _opnav_camera.OpnavCamera_n3_stars_only_set)
    __swig_setmethods__["vismag_stars_only"] = _opnav_camera.OpnavCamera_vismag_stars_only_set
    __swig_getmethods__["vismag_stars_only"] = _opnav_camera.OpnavCamera_vismag_stars_only_get
    if _newclass:
        vismag_stars_only = _swig_property(_opnav_camera.OpnavCamera_vismag_stars_only_get, _opnav_camera.OpnavCamera_vismag_stars_only_set)
    __swig_setmethods__["RA"] = _opnav_camera.OpnavCamera_RA_set
    __swig_getmethods__["RA"] = _opnav_camera.OpnavCamera_RA_get
    if _newclass:
        RA = _swig_property(_opnav_camera.OpnavCamera_RA_get, _opnav_camera.OpnavCamera_RA_set)
    __swig_setmethods__["DE"] = _opnav_camera.OpnavCamera_DE_set
    __swig_getmethods__["DE"] = _opnav_camera.OpnavCamera_DE_get
    if _newclass:
        DE = _swig_property(_opnav_camera.OpnavCamera_DE_get, _opnav_camera.OpnavCamera_DE_set)
    __swig_setmethods__["n1"] = _opnav_camera.OpnavCamera_n1_set
    __swig_getmethods__["n1"] = _opnav_camera.OpnavCamera_n1_get
    if _newclass:
        n1 = _swig_property(_opnav_camera.OpnavCamera_n1_get, _opnav_camera.OpnavCamera_n1_set)
    __swig_setmethods__["n2"] = _opnav_camera.OpnavCamera_n2_set
    __swig_getmethods__["n2"] = _opnav_camera.OpnavCamera_n2_get
    if _newclass:
        n2 = _swig_property(_opnav_camera.OpnavCamera_n2_get, _opnav_camera.OpnavCamera_n2_set)
    __swig_setmethods__["n3"] = _opnav_camera.OpnavCamera_n3_set
    __swig_getmethods__["n3"] = _opnav_camera.OpnavCamera_n3_get
    if _newclass:
        n3 = _swig_property(_opnav_camera.OpnavCamera_n3_get, _opnav_camera.OpnavCamera_n3_set)
    __swig_setmethods__["c1"] = _opnav_camera.OpnavCamera_c1_set
    __swig_getmethods__["c1"] = _opnav_camera.OpnavCamera_c1_get
    if _newclass:
        c1 = _swig_property(_opnav_camera.OpnavCamera_c1_get, _opnav_camera.OpnavCamera_c1_set)
    __swig_setmethods__["c2"] = _opnav_camera.OpnavCamera_c2_set
    __swig_getmethods__["c2"] = _opnav_camera.OpnavCamera_c2_get
    if _newclass:
        c2 = _swig_property(_opnav_camera.OpnavCamera_c2_get, _opnav_camera.OpnavCamera_c2_set)
    __swig_setmethods__["c3"] = _opnav_camera.OpnavCamera_c3_set
    __swig_getmethods__["c3"] = _opnav_camera.OpnavCamera_c3_get
    if _newclass:
        c3 = _swig_property(_opnav_camera.OpnavCamera_c3_get, _opnav_camera.OpnavCamera_c3_set)
    __swig_setmethods__["all_mags"] = _opnav_camera.OpnavCamera_all_mags_set
    __swig_getmethods__["all_mags"] = _opnav_camera.OpnavCamera_all_mags_get
    if _newclass:
        all_mags = _swig_property(_opnav_camera.OpnavCamera_all_mags_get, _opnav_camera.OpnavCamera_all_mags_set)
    __swig_setmethods__["RA_float"] = _opnav_camera.OpnavCamera_RA_float_set
    __swig_getmethods__["RA_float"] = _opnav_camera.OpnavCamera_RA_float_get
    if _newclass:
        RA_float = _swig_property(_opnav_camera.OpnavCamera_RA_float_get, _opnav_camera.OpnavCamera_RA_float_set)
    __swig_setmethods__["DE_float"] = _opnav_camera.OpnavCamera_DE_float_set
    __swig_getmethods__["DE_float"] = _opnav_camera.OpnavCamera_DE_float_get
    if _newclass:
        DE_float = _swig_property(_opnav_camera.OpnavCamera_DE_float_get, _opnav_camera.OpnavCamera_DE_float_set)
    __swig_setmethods__["vismag_float"] = _opnav_camera.OpnavCamera_vismag_float_set
    __swig_getmethods__["vismag_float"] = _opnav_camera.OpnavCamera_vismag_float_get
    if _newclass:
        vismag_float = _swig_property(_opnav_camera.OpnavCamera_vismag_float_get, _opnav_camera.OpnavCamera_vismag_float_set)
    __swig_setmethods__["alpha"] = _opnav_camera.OpnavCamera_alpha_set
    __swig_getmethods__["alpha"] = _opnav_camera.OpnavCamera_alpha_get
    if _newclass:
        alpha = _swig_property(_opnav_camera.OpnavCamera_alpha_get, _opnav_camera.OpnavCamera_alpha_set)
    __swig_setmethods__["beta"] = _opnav_camera.OpnavCamera_beta_set
    __swig_getmethods__["beta"] = _opnav_camera.OpnavCamera_beta_get
    if _newclass:
        beta = _swig_property(_opnav_camera.OpnavCamera_beta_get, _opnav_camera.OpnavCamera_beta_set)
    __swig_setmethods__["gamma"] = _opnav_camera.OpnavCamera_gamma_set
    __swig_getmethods__["gamma"] = _opnav_camera.OpnavCamera_gamma_get
    if _newclass:
        gamma = _swig_property(_opnav_camera.OpnavCamera_gamma_get, _opnav_camera.OpnavCamera_gamma_set)
    __swig_setmethods__["alpha_detector"] = _opnav_camera.OpnavCamera_alpha_detector_set
    __swig_getmethods__["alpha_detector"] = _opnav_camera.OpnavCamera_alpha_detector_get
    if _newclass:
        alpha_detector = _swig_property(_opnav_camera.OpnavCamera_alpha_detector_get, _opnav_camera.OpnavCamera_alpha_detector_set)
    __swig_setmethods__["beta_detector"] = _opnav_camera.OpnavCamera_beta_detector_set
    __swig_getmethods__["beta_detector"] = _opnav_camera.OpnavCamera_beta_detector_get
    if _newclass:
        beta_detector = _swig_property(_opnav_camera.OpnavCamera_beta_detector_get, _opnav_camera.OpnavCamera_beta_detector_set)
    __swig_setmethods__["a"] = _opnav_camera.OpnavCamera_a_set
    __swig_getmethods__["a"] = _opnav_camera.OpnavCamera_a_get
    if _newclass:
        a = _swig_property(_opnav_camera.OpnavCamera_a_get, _opnav_camera.OpnavCamera_a_set)
    __swig_setmethods__["b"] = _opnav_camera.OpnavCamera_b_set
    __swig_getmethods__["b"] = _opnav_camera.OpnavCamera_b_get
    if _newclass:
        b = _swig_property(_opnav_camera.OpnavCamera_b_get, _opnav_camera.OpnavCamera_b_set)
    __swig_setmethods__["c"] = _opnav_camera.OpnavCamera_c_set
    __swig_getmethods__["c"] = _opnav_camera.OpnavCamera_c_get
    if _newclass:
        c = _swig_property(_opnav_camera.OpnavCamera_c_get, _opnav_camera.OpnavCamera_c_set)
    __swig_setmethods__["f"] = _opnav_camera.OpnavCamera_f_set
    __swig_getmethods__["f"] = _opnav_camera.OpnavCamera_f_get
    if _newclass:
        f = _swig_property(_opnav_camera.OpnavCamera_f_get, _opnav_camera.OpnavCamera_f_set)
    __swig_setmethods__["gamma_detector"] = _opnav_camera.OpnavCamera_gamma_detector_set
    __swig_getmethods__["gamma_detector"] = _opnav_camera.OpnavCamera_gamma_detector_get
    if _newclass:
        gamma_detector = _swig_property(_opnav_camera.OpnavCamera_gamma_detector_get, _opnav_camera.OpnavCamera_gamma_detector_set)
    __swig_setmethods__["c2_min"] = _opnav_camera.OpnavCamera_c2_min_set
    __swig_getmethods__["c2_min"] = _opnav_camera.OpnavCamera_c2_min_get
    if _newclass:
        c2_min = _swig_property(_opnav_camera.OpnavCamera_c2_min_get, _opnav_camera.OpnavCamera_c2_min_set)
    __swig_setmethods__["c2_max"] = _opnav_camera.OpnavCamera_c2_max_set
    __swig_getmethods__["c2_max"] = _opnav_camera.OpnavCamera_c2_max_get
    if _newclass:
        c2_max = _swig_property(_opnav_camera.OpnavCamera_c2_max_get, _opnav_camera.OpnavCamera_c2_max_set)
    __swig_setmethods__["c3_min"] = _opnav_camera.OpnavCamera_c3_min_set
    __swig_getmethods__["c3_min"] = _opnav_camera.OpnavCamera_c3_min_get
    if _newclass:
        c3_min = _swig_property(_opnav_camera.OpnavCamera_c3_min_get, _opnav_camera.OpnavCamera_c3_min_set)
    __swig_setmethods__["c3_max"] = _opnav_camera.OpnavCamera_c3_max_set
    __swig_getmethods__["c3_max"] = _opnav_camera.OpnavCamera_c3_max_get
    if _newclass:
        c3_max = _swig_property(_opnav_camera.OpnavCamera_c3_max_get, _opnav_camera.OpnavCamera_c3_max_set)
    __swig_setmethods__["FOV_dimensions"] = _opnav_camera.OpnavCamera_FOV_dimensions_set
    __swig_getmethods__["FOV_dimensions"] = _opnav_camera.OpnavCamera_FOV_dimensions_get
    if _newclass:
        FOV_dimensions = _swig_property(_opnav_camera.OpnavCamera_FOV_dimensions_get, _opnav_camera.OpnavCamera_FOV_dimensions_set)

    def calculate_FOV(self, f, a, b):
        return _opnav_camera.OpnavCamera_calculate_FOV(self, f, a, b)
    __swig_setmethods__["alpha_resolution"] = _opnav_camera.OpnavCamera_alpha_resolution_set
    __swig_getmethods__["alpha_resolution"] = _opnav_camera.OpnavCamera_alpha_resolution_get
    if _newclass:
        alpha_resolution = _swig_property(_opnav_camera.OpnavCamera_alpha_resolution_get, _opnav_camera.OpnavCamera_alpha_resolution_set)
    __swig_setmethods__["beta_resolution"] = _opnav_camera.OpnavCamera_beta_resolution_set
    __swig_getmethods__["beta_resolution"] = _opnav_camera.OpnavCamera_beta_resolution_get
    if _newclass:
        beta_resolution = _swig_property(_opnav_camera.OpnavCamera_beta_resolution_get, _opnav_camera.OpnavCamera_beta_resolution_set)
    __swig_setmethods__["pixel_out"] = _opnav_camera.OpnavCamera_pixel_out_set
    __swig_getmethods__["pixel_out"] = _opnav_camera.OpnavCamera_pixel_out_get
    if _newclass:
        pixel_out = _swig_property(_opnav_camera.OpnavCamera_pixel_out_get, _opnav_camera.OpnavCamera_pixel_out_set)
    __swig_setmethods__["line_out"] = _opnav_camera.OpnavCamera_line_out_set
    __swig_getmethods__["line_out"] = _opnav_camera.OpnavCamera_line_out_get
    if _newclass:
        line_out = _swig_property(_opnav_camera.OpnavCamera_line_out_get, _opnav_camera.OpnavCamera_line_out_set)
    __swig_setmethods__["mag_out"] = _opnav_camera.OpnavCamera_mag_out_set
    __swig_getmethods__["mag_out"] = _opnav_camera.OpnavCamera_mag_out_get
    if _newclass:
        mag_out = _swig_property(_opnav_camera.OpnavCamera_mag_out_get, _opnav_camera.OpnavCamera_mag_out_set)
    __swig_setmethods__["OpnavMessage"] = _opnav_camera.OpnavCamera_OpnavMessage_set
    __swig_getmethods__["OpnavMessage"] = _opnav_camera.OpnavCamera_OpnavMessage_get
    if _newclass:
        OpnavMessage = _swig_property(_opnav_camera.OpnavCamera_OpnavMessage_get, _opnav_camera.OpnavCamera_OpnavMessage_set)

    def __init__(self, *args):
        this = _opnav_camera.new_OpnavCamera(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
OpnavCamera_swigregister = _opnav_camera.OpnavCamera_swigregister
OpnavCamera_swigregister(OpnavCamera)

sizeof_OpnavMessageStruct = _opnav_camera.sizeof_OpnavMessageStruct

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


